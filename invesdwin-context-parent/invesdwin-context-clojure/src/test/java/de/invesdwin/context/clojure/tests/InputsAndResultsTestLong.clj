(defmacro defined [& var]
    `(try 
        (or 
            (boolean (resolve ~@var)) 
            (not (nil? (eval ~@var)))
        ) (catch Exception e# false)
    )
)

(println "getLong")
(if (defined 'getLong)
	(throw (Exception. "getLong already defined!"))
)
(def getLong putLong)
(def getLongType (class getLong))
(println getLongType)
(println getLong)
(if-not (= getLongType Integer)
	(throw (Exception. "getLong not Integer!"))
)

(println "getLongVector")
(if (defined 'getLongVector)
	(throw (Exception. "getLongVector already defined!"))
)
(def getLongVector putLongVector)
(def getLongVectorType (class getLongVector[0]))
(println getLongVectorType)
(println getLongVector)
(if-not (= getLongVectorType Integer)
	(throw (Exception. "getLongVector not Integer!"))
)

(println "getLongVectorAsList")
(if (defined 'getLongVectorAsList)
	(throw (Exception. "getLongVectorAsList already defined!"))
)
(def getLongVectorAsList putLongVectorAsList)
(def getLongVectorAsListType (class getLongVectorAsList[0]))
(println getLongVectorAsListType)
(println getLongVectorAsList)
(if-not (= getLongVectorAsListType Integer)
	(throw (Exception. "getLongVectorAsList not Integer!"))
)

(println "getLongMatrix")
(if (defined 'getLongMatrix)
	(throw (Exception. "getLongMatrix already defined!"))
)
(def getLongMatrix putLongMatrix)
(def getLongMatrixType (class getLongMatrix[0][0]))
(println getLongMatrixType)
(println getLongMatrix)
(if-not (= getLongMatrixType Integer)
	(throw (Exception. "getLongMatrix not Integer!"))
)

(println "getLongMatrixAsList")
(if (defined 'getLongMatrixAsList)
	(throw (Exception. "getLongMatrixAsList already defined!"))
)
(def getLongMatrixAsList putLongMatrixAsList)
(def getLongMatrixAsListType (class getLongMatrixAsList[0][0]))
(println getLongMatrixAsListType)
(println getLongMatrixAsList)
(if-not (= getLongMatrixAsListType Integer)
	(throw (Exception. "getLongMatrixAsList not Integer!"))
)
