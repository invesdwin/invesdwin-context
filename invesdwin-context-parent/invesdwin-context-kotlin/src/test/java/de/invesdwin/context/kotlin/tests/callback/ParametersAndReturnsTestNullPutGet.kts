val getBooleanVector: BooleanArray? = callback("getBooleanVector")
if(getBooleanVector != null)
	throw Exception("getBooleanVector not null!")
callback<Unit>("setBooleanVector",getBooleanVector)
val getBooleanVectorAsList: BooleanArray? = callback("getBooleanVectorAsList")
if(getBooleanVectorAsList != null)
	throw Exception("getBooleanVectorAsList not null!")
callback<Unit>("setBooleanVectorAsList",getBooleanVectorAsList)
val getBooleanMatrix: Array<BooleanArray>? = callback("getBooleanMatrix")
if(getBooleanMatrix != null)
	throw Exception("getBooleanMatrix not null!")
callback<Unit>("setBooleanMatrix",getBooleanMatrix)
val getBooleanMatrixAsList: Array<BooleanArray>? = callback("getBooleanMatrixAsList")
if(getBooleanMatrixAsList != null)
	throw Exception("getBooleanMatrixAsList not null!")
callback<Unit>("setBooleanMatrixAsList",getBooleanMatrixAsList)

val getByteVector: ByteArray? = callback("getByteVector")
if(getByteVector != null)
	throw Exception("getByteVector not null!")
callback<Unit>("setByteVector",getByteVector)
val getByteVectorAsList: ByteArray? = callback("getByteVectorAsList")
if(getByteVectorAsList != null)
	throw Exception("getByteVectorAsList not null!")
callback<Unit>("setByteVectorAsList",getByteVectorAsList)
val getByteMatrix: Array<ByteArray>? = callback("getByteMatrix")
if(getByteMatrix != null)
	throw Exception("getByteMatrix not null!")
callback<Unit>("setByteMatrix",getByteMatrix)
val getByteMatrixAsList: Array<ByteArray>? = callback("getByteMatrixAsList")
if(getByteMatrixAsList != null)
	throw Exception("getByteMatrixAsList not null!")
callback<Unit>("setByteMatrixAsList",getByteMatrixAsList)

val getCharacterVector: CharArray? = callback("getCharacterVector")
if(getCharacterVector != null)
	throw Exception("getCharacterVector not null!")
callback<Unit>("setCharacterVector",getCharacterVector)
val getCharacterVectorAsList: CharArray? = callback("getCharacterVectorAsList")
if(getCharacterVectorAsList != null)
	throw Exception("getCharacterVectorAsList not null!")
callback<Unit>("setCharacterVectorAsList",getCharacterVectorAsList)
val getCharacterMatrix: Array<CharArray>? = callback("getCharacterMatrix")
if(getCharacterMatrix != null)
	throw Exception("getCharacterMatrix not null!")
callback<Unit>("setCharacterMatrix",getCharacterMatrix)
val getCharacterMatrixAsList: Array<CharArray>? = callback("getCharacterMatrixAsList")
if(getCharacterMatrixAsList != null)
	throw Exception("getCharacterMatrixAsList not null!")
callback<Unit>("setCharacterMatrixAsList",getCharacterMatrixAsList)

val getDecimalVector: DoubleArray? = callback("getDecimalVector")
if(getDecimalVector != null)
	throw Exception("getDecimalVector not null!")
callback<Unit>("setDecimalVector",getDecimalVector)
val getDecimalVectorAsList: DoubleArray? = callback("getDecimalVectorAsList")
if(getDecimalVectorAsList != null)
	throw Exception("getDecimalVectorAsList not null!")
callback<Unit>("setDecimalVectorAsList",getDecimalVectorAsList)
val getDecimalMatrix: Array<DoubleArray>? = callback("getDecimalMatrix")
if(getDecimalMatrix != null)
	throw Exception("getDecimalMatrix not null!")
callback<Unit>("setDecimalMatrix",getDecimalMatrix)
val getDecimalMatrixAsList: Array<DoubleArray>? = callback("getDecimalMatrixAsList")
if(getDecimalMatrixAsList != null)
	throw Exception("getDecimalMatrixAsList not null!")
callback<Unit>("setDecimalMatrixAsList",getDecimalMatrixAsList)

val getDoubleVector: DoubleArray? = callback("getDoubleVector")
if(getDoubleVector != null)
	throw Exception("getDoubleVector not null!")
callback<Unit>("setDoubleVector",getDoubleVector)
val getDoubleVectorAsList: DoubleArray? = callback("getDoubleVectorAsList")
if(getDoubleVectorAsList != null)
	throw Exception("getDoubleVectorAsList not null!")
callback<Unit>("setDoubleVectorAsList",getDoubleVectorAsList)
val getDoubleMatrix: Array<DoubleArray>? = callback("getDoubleMatrix")
if(getDoubleMatrix != null)
	throw Exception("getDoubleMatrix not null!")
callback<Unit>("setDoubleMatrix",getDoubleMatrix)
val getDoubleMatrixAsList: Array<DoubleArray>? = callback("getDoubleMatrixAsList")
if(getDoubleMatrixAsList != null)
	throw Exception("getDoubleMatrixAsList not null!")
callback<Unit>("setDoubleMatrixAsList",getDoubleMatrixAsList)

val getFloatVector: FloatArray? = callback("getFloatVector")
if(getFloatVector != null)
	throw Exception("getFloatVector not null!")
callback<Unit>("setFloatVector",getFloatVector)
val getFloatVectorAsList: FloatArray? = callback("getFloatVectorAsList")
if(getFloatVectorAsList != null)
	throw Exception("getFloatVectorAsList not null!")
callback<Unit>("setFloatVectorAsList",getFloatVectorAsList)
val getFloatMatrix: Array<FloatArray>? = callback("getFloatMatrix")
if(getFloatMatrix != null)
	throw Exception("getFloatMatrix not null!")
callback<Unit>("setFloatMatrix",getFloatMatrix)
val getFloatMatrixAsList: Array<FloatArray>? = callback("getFloatMatrixAsList")
if(getFloatMatrixAsList != null)
	throw Exception("getFloatMatrixAsList not null!")
callback<Unit>("setFloatMatrixAsList",getFloatMatrixAsList)

val getIntegerVector: IntArray? = callback("getIntegerVector")
if(getIntegerVector != null)
	throw Exception("getIntegerVector not null!")
callback<Unit>("setIntegerVector",getIntegerVector)
val getIntegerVectorAsList: IntArray? = callback("getIntegerVectorAsList")
if(getIntegerVectorAsList != null)
	throw Exception("getIntegerVectorAsList not null!")
callback<Unit>("setIntegerVectorAsList",getIntegerVectorAsList)
val getIntegerMatrix: Array<IntArray>? = callback("getIntegerMatrix")
if(getIntegerMatrix != null)
	throw Exception("getIntegerMatrix not null!")
callback<Unit>("setIntegerMatrix",getIntegerMatrix)
val getIntegerMatrixAsList: Array<IntArray>? = callback("getIntegerMatrixAsList")
if(getIntegerMatrixAsList != null)
	throw Exception("getIntegerMatrixAsList not null!")
callback<Unit>("setIntegerMatrixAsList",getIntegerMatrixAsList)

val getLongVector: LongArray? = callback("getLongVector")
if(getLongVector != null)
	throw Exception("getLongVector not null!")
callback<Unit>("setLongVector",getLongVector)
val getLongVectorAsList: LongArray? = callback("getLongVectorAsList")
if(getLongVectorAsList != null)
	throw Exception("getLongVectorAsList not null!")
callback<Unit>("setLongVectorAsList",getLongVectorAsList)
val getLongMatrix: Array<LongArray>? = callback("getLongMatrix")
if(getLongMatrix != null)
	throw Exception("getLongMatrix not null!")
callback<Unit>("setLongMatrix",getLongMatrix)
val getLongMatrixAsList: Array<LongArray>? = callback("getLongMatrixAsList")
if(getLongMatrixAsList != null)
	throw Exception("getLongMatrixAsList not null!")
callback<Unit>("setLongMatrixAsList",getLongMatrixAsList)

val getPercentVector: DoubleArray? = callback("getPercentVector")
if(getPercentVector != null)
	throw Exception("getPercentVector not null!")
callback<Unit>("setPercentVector",getPercentVector)
val getPercentVectorAsList: DoubleArray? = callback("getPercentVectorAsList")
if(getPercentVectorAsList != null)
	throw Exception("getPercentVectorAsList not null!")
callback<Unit>("setPercentVectorAsList",getPercentVectorAsList)
val getPercentMatrix: Array<DoubleArray>? = callback("getPercentMatrix")
if(getPercentMatrix != null)
	throw Exception("getPercentMatrix not null!")
callback<Unit>("setPercentMatrix",getPercentMatrix)
val getPercentMatrixAsList: Array<DoubleArray>? = callback("getPercentMatrixAsList")
if(getPercentMatrixAsList != null)
	throw Exception("getPercentMatrixAsList not null!")
callback<Unit>("setPercentMatrixAsList",getPercentMatrixAsList)

val getShortVector: ShortArray? = callback("getShortVector")
if(getShortVector != null)
	throw Exception("getShortVector not null!")
callback<Unit>("setShortVector",getShortVector)
val getShortVectorAsList: ShortArray? = callback("getShortVectorAsList")
if(getShortVectorAsList != null)
	throw Exception("getShortVectorAsList not null!")
callback<Unit>("setShortVectorAsList",getShortVectorAsList)
val getShortMatrix: Array<ShortArray>? = callback("getShortMatrix")
if(getShortMatrix != null)
	throw Exception("getShortMatrix not null!")
callback<Unit>("setShortMatrix",getShortMatrix)
val getShortMatrixAsList: Array<ShortArray>? = callback("getShortMatrixAsList")
if(getShortMatrixAsList != null)
	throw Exception("getShortMatrixAsList not null!")
callback<Unit>("setShortMatrixAsList",getShortMatrixAsList)

val getStringVector: Array<String>? = callback("getStringVector")
if(getStringVector != null)
	throw Exception("getStringVector not null!")
callback<Unit>("setStringVector",getStringVector)
val getStringVectorAsList: Array<String>? = callback("getStringVectorAsList")
if(getStringVectorAsList != null)
	throw Exception("getStringVectorAsList not null!")
callback<Unit>("setStringVectorAsList",getStringVectorAsList)
val getStringMatrix: Array<Array<String>>? = callback("getStringMatrix")
if(getStringMatrix != null)
	throw Exception("getStringMatrix not null!")
callback<Unit>("setStringMatrix",getStringMatrix)
val getStringMatrixAsList: Array<Array<String>>? = callback("getStringMatrixAsList")
if(getStringMatrixAsList != null)
	throw Exception("getStringMatrixAsList not null!")
callback<Unit>("setStringMatrixAsList",getStringMatrixAsList)
