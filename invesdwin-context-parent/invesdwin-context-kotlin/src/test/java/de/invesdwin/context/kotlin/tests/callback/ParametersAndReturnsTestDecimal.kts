println("getDecimal")
if(bindings.containsKey("getDecimal"))
	throw Exception("getDecimal already defined!")
val getDecimal = callback("getDecimal")
val getDecimalType = getDecimal::class
println(getDecimalType)
println(getDecimal)
if(getDecimalType != Double::class)
	throw Exception("getDecimal not Double!")
callback("setDecimal",getDecimal)

println("getDecimalVector")
if(bindings.containsKey("getDecimalVector"))
	throw Exception("getDecimalVector already defined!")
val getDecimalVector = callback("getDecimalVector")
val getDecimalVectorType = getDecimalVector[0]::class
println(getDecimalVectorType)
println(getDecimalVector)
if(getDecimalVectorType != Double::class)
	throw Exception("getDecimalVector not Double!")
callback("setDecimalVector",getDecimalVector)

println("getDecimalVectorAsList")
if(bindings.containsKey("getDecimalVectorAsList"))
	throw Exception("getDecimalVectorAsList already defined!")
val getDecimalVectorAsList = callback("getDecimalVectorAsList")
val getDecimalVectorAsListType = getDecimalVectorAsList[0]::class
println(getDecimalVectorAsListType)
println(getDecimalVectorAsList)
if(getDecimalVectorAsListType != Double::class)
	throw Exception("getDecimalVectorAsList not Double!")
callback("setDecimalVectorAsList",getDecimalVectorAsList)

println("getDecimalMatrix")
if(bindings.containsKey("getDecimalMatrix"))
	throw Exception("getDecimalMatrix already defined!")
val getDecimalMatrix = callback("getDecimalMatrix")
val getDecimalMatrixType = getDecimalMatrix[0][0]::class
println(getDecimalMatrixType)
println(getDecimalMatrix)
if(getDecimalMatrixType != Double::class)
	throw Exception("getDecimalMatrix not Double!")
callback("setDecimalMatrix",getDecimalMatrix)

println("getDecimalMatrixAsList")
if(bindings.containsKey("getDecimalMatrixAsList"))
	throw Exception("getDecimalMatrixAsList already defined!")
val getDecimalMatrixAsList = callback("getDecimalMatrixAsList")
val getDecimalMatrixAsListType = getDecimalMatrixAsList[0][0]::class
println(getDecimalMatrixAsListType)
println(getDecimalMatrixAsList)
if(getDecimalMatrixAsListType != Double::class)
	throw Exception("getDecimalMatrixAsList not Double!")
callback("setDecimalMatrixAsList",getDecimalMatrixAsList)
