var getBooleanVector = callback("getBooleanVector",[]);
if(getBooleanVector.length != 0)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getBooleanVector not empty!"));
callback("setBooleanVector",[getBooleanVector]);

var getBooleanVectorAsList = callback("getBooleanVectorAsList",[]);
if(getBooleanVectorAsList.length != 0)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getBooleanVectorAsList not empty!"));
callback("setBooleanVectorAsList",[getBooleanVectorAsList]);

var getBooleanMatrix = callback("getBooleanMatrix",[]);
if(getBooleanMatrix.length != 0)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getBooleanMatrix not empty!"));
callback("setBooleanMatrix",[getBooleanMatrix]);

var getBooleanMatrixAsList = callback("getBooleanMatrixAsList",[]);
if(getBooleanMatrixAsList.length != 0)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getBooleanMatrixAsList not empty!"));
callback("setBooleanMatrixAsList",[getBooleanMatrixAsList]);


var getByteVector = callback("getByteVector",[]);
if(getByteVector.length != 0)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getByteVector not empty!"));
callback("setByteVector",[getByteVector]);

var getByteVectorAsList = callback("getByteVectorAsList",[]);
if(getByteVectorAsList.length != 0)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getByteVectorAsList not empty!"));
callback("setByteVectorAsList",[getByteVectorAsList]);

var getByteMatrix = callback("getByteMatrix",[]);
if(getByteMatrix.length != 0)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getByteMatrix not empty!"));
callback("setByteMatrix",[getByteMatrix]);

var getByteMatrixAsList = callback("getByteMatrixAsList",[]);
if(getByteMatrixAsList.length != 0)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getByteMatrixAsList not empty!"));
callback("setByteMatrixAsList",[getByteMatrixAsList]);


var getCharacterVector = callback("getCharacterVector",[]);
if(getCharacterVector.length != 0)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getCharacterVector not empty!"));
callback("setCharacterVector",[getCharacterVector]);

var getCharacterVectorAsList = callback("getCharacterVectorAsList",[]);
if(getCharacterVectorAsList.length != 0)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getCharacterVectorAsList not empty!"));
callback("setCharacterVectorAsList",[getCharacterVectorAsList]);

var getCharacterMatrix = callback("getCharacterMatrix",[]);
if(getCharacterMatrix.length != 0)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getCharacterMatrix not empty!"));
callback("setCharacterMatrix",[getCharacterMatrix]);

var getCharacterMatrixAsList = callback("getCharacterMatrixAsList",[]);
if(getCharacterMatrixAsList.length != 0)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getCharacterMatrixAsList not empty!"));
callback("setCharacterMatrixAsList",[getCharacterMatrixAsList]);


var getDecimalVector = callback("getDecimalVector",[]);
if(getDecimalVector.length != 0)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getDecimalVector not empty!"));
callback("setDecimalVector",[getDecimalVector]);

var getDecimalVectorAsList = callback("getDecimalVectorAsList",[]);
if(getDecimalVectorAsList.length != 0)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getDecimalVectorAsList not empty!"));
callback("setDecimalVectorAsList",[getDecimalVectorAsList]);

var getDecimalMatrix = callback("getDecimalMatrix",[]);
if(getDecimalMatrix.length != 0)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getDecimalMatrix not empty!"));
callback("setDecimalMatrix",[getDecimalMatrix]);

var getDecimalMatrixAsList = callback("getDecimalMatrixAsList",[]);
if(getDecimalMatrixAsList.length != 0)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getDecimalMatrixAsList not empty!"));
callback("setDecimalMatrixAsList",[getDecimalMatrixAsList]);


var getDoubleVector = callback("getDoubleVector",[]);
if(getDoubleVector.length != 0)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getDoubleVector not empty!"));
callback("setDoubleVector",[getDoubleVector]);

var getDoubleVectorAsList = callback("getDoubleVectorAsList",[]);
if(getDoubleVectorAsList.length != 0)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getDoubleVectorAsList not empty!"));
callback("setDoubleVectorAsList",[getDoubleVectorAsList]);

var getDoubleMatrix = callback("getDoubleMatrix",[]);
if(getDoubleMatrix.length != 0)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getDoubleMatrix not empty!"));
callback("setDoubleMatrix",[getDoubleMatrix]);

var getDoubleMatrixAsList = callback("getDoubleMatrixAsList",[]);
if(getDoubleMatrixAsList.length != 0)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getDoubleMatrixAsList not empty!"));
callback("setDoubleMatrixAsList",[getDoubleMatrixAsList]);


var getFloatVector = callback("getFloatVector",[]);
if(getFloatVector.length != 0)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getFloatVector not empty!"));
callback("setFloatVector",[getFloatVector]);

var getFloatVectorAsList = callback("getFloatVectorAsList",[]);
if(getFloatVectorAsList.length != 0)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getFloatVectorAsList not empty!"));
callback("setFloatVectorAsList",[getFloatVectorAsList]);

var getFloatMatrix = callback("getFloatMatrix",[]);
if(getFloatMatrix.length != 0)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getFloatMatrix not empty!"));
callback("setFloatMatrix",[getFloatMatrix]);

var getFloatMatrixAsList = callback("getFloatMatrixAsList",[]);
if(getFloatMatrixAsList.length != 0)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getFloatMatrixAsList not empty!"));
callback("setFloatMatrixAsList",[getFloatMatrixAsList]);


var getIntegerVector = callback("getIntegerVector",[]);
if(getIntegerVector.length != 0)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getIntegerVector not empty!"));
callback("setIntegerVector",[getIntegerVector]);

var getIntegerVectorAsList = callback("getIntegerVectorAsList",[]);
if(getIntegerVectorAsList.length != 0)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getIntegerVectorAsList not empty!"));
callback("setIntegerVectorAsList",[getIntegerVectorAsList]);

var getIntegerMatrix = callback("getIntegerMatrix",[]);
if(getIntegerMatrix.length != 0)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getIntegerMatrix not empty!"));
callback("setIntegerMatrix",[getIntegerMatrix]);

var getIntegerMatrixAsList = callback("getIntegerMatrixAsList",[]);
if(getIntegerMatrixAsList.length != 0)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getIntegerMatrixAsList not empty!"));
callback("setIntegerMatrixAsList",[getIntegerMatrixAsList]);


var getLongVector = callback("getLongVector",[]);
if(getLongVector.length != 0)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getLongVector not empty!"));
callback("setLongVector",[getLongVector]);

var getLongVectorAsList = callback("getLongVectorAsList",[]);
if(getLongVectorAsList.length != 0)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getLongVectorAsList not empty!"));
callback("setLongVectorAsList",[getLongVectorAsList]);

var getLongMatrix = callback("getLongMatrix",[]);
if(getLongMatrix.length != 0)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getLongMatrix not empty!"));
callback("setLongMatrix",[getLongMatrix]);

var getLongMatrixAsList = callback("getLongMatrixAsList",[]);
if(getLongMatrixAsList.length != 0)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getLongMatrixAsList not empty!"));
callback("setLongMatrixAsList",[getLongMatrixAsList]);


var getPercentVector = callback("getPercentVector",[]);
if(getPercentVector.length != 0)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getPercentVector not empty!"));
callback("setPercentVector",[getPercentVector]);

var getPercentVectorAsList = callback("getPercentVectorAsList",[]);
if(getPercentVectorAsList.length != 0)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getPercentVectorAsList not empty!"));
callback("setPercentVectorAsList",[getPercentVectorAsList]);

var getPercentMatrix = callback("getPercentMatrix",[]);
if(getPercentMatrix.length != 0)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getPercentMatrix not empty!"));
callback("setPercentMatrix",[getPercentMatrix]);

var getPercentMatrixAsList = callback("getPercentMatrixAsList",[]);
if(getPercentMatrixAsList.length != 0)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getPercentMatrixAsList not empty!"));
callback("setPercentMatrixAsList",[getPercentMatrixAsList]);


var getShortVector = callback("getShortVector",[]);
if(getShortVector.length != 0)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getShortVector not empty!"));
callback("setShortVector",[getShortVector]);

var getShortVectorAsList = callback("getShortVectorAsList",[]);
if(getShortVectorAsList.length != 0)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getShortVectorAsList not empty!"));
callback("setShortVectorAsList",[getShortVectorAsList]);

var getShortMatrix = callback("getShortMatrix",[]);
if(getShortMatrix.length != 0)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getShortMatrix not empty!"));
callback("setShortMatrix",[getShortMatrix]);

var getShortMatrixAsList = callback("getShortMatrixAsList",[]);
if(getShortMatrixAsList.length != 0)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getShortMatrixAsList not empty!"));
callback("setShortMatrixAsList",[getShortMatrixAsList]);


var getStringVector = callback("getStringVector",[]);
if(getStringVector.length != 0)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getStringVector not empty!"));
callback("setStringVector",[getStringVector]);

var getStringVectorAsList = callback("getStringVectorAsList",[]);
if(getStringVectorAsList.length != 0)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getStringVectorAsList not empty!"));
callback("setStringVectorAsList",[getStringVectorAsList]);

var getStringMatrix = callback("getStringMatrix",[]);
if(getStringMatrix.length != 0)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getStringMatrix not empty!"));
callback("setStringMatrix",[getStringMatrix]);

var getStringMatrixAsList = callback("getStringMatrixAsList",[]);
if(getStringMatrixAsList.length != 0)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getStringMatrixAsList not empty!"));
callback("setStringMatrixAsList",[getStringMatrixAsList]);
