var getBooleanVector = callback("getBooleanVector",[]);
if(getBooleanVector != null)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getBooleanVector not null!"));
callback("setBooleanVector",[getBooleanVector]);
var getBooleanVectorAsList = callback("getBooleanVectorAsList",[]);
if(getBooleanVectorAsList != null)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getBooleanVectorAsList not null!"));
callback("setBooleanVectorAsList",[getBooleanVectorAsList]);
var getBooleanMatrix = callback("getBooleanMatrix",[]);
if(getBooleanMatrix != null)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getBooleanMatrix not null!"));
callback("setBooleanMatrix",[getBooleanMatrix]);
var getBooleanMatrixAsList = callback("getBooleanMatrixAsList",[]);
if(getBooleanMatrixAsList != null)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getBooleanMatrixAsList not null!"));
callback("setBooleanMatrixAsList",[getBooleanMatrixAsList]);

var getByteVector = callback("getByteVector",[]);
if(getByteVector != null)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getByteVector not null!"));
callback("setByteVector",[getByteVector]);
var getByteVectorAsList = callback("getByteVectorAsList",[]);
if(getByteVectorAsList != null)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getByteVectorAsList not null!"));
callback("setByteVectorAsList",[getByteVectorAsList]);
var getByteMatrix = callback("getByteMatrix",[]);
if(getByteMatrix != null)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getByteMatrix not null!"));
callback("setByteMatrix",[getByteMatrix]);
var getByteMatrixAsList = callback("getByteMatrixAsList",[]);
if(getByteMatrixAsList != null)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getByteMatrixAsList not null!"));
callback("setByteMatrixAsList",[getByteMatrixAsList]);

var getCharacterVector = callback("getCharacterVector",[]);
if(getCharacterVector != null)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getCharacterVector not null!"));
callback("setCharacterVector",[getCharacterVector]);
var getCharacterVectorAsList = callback("getCharacterVectorAsList",[]);
if(getCharacterVectorAsList != null)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getCharacterVectorAsList not null!"));
callback("setCharacterVectorAsList",[getCharacterVectorAsList]);
var getCharacterMatrix = callback("getCharacterMatrix",[]);
if(getCharacterMatrix != null)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getCharacterMatrix not null!"));
callback("setCharacterMatrix",[getCharacterMatrix]);
var getCharacterMatrixAsList = callback("getCharacterMatrixAsList",[]);
if(getCharacterMatrixAsList != null)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getCharacterMatrixAsList not null!"));
callback("setCharacterMatrixAsList",[getCharacterMatrixAsList]);

var getDecimalVector = callback("getDecimalVector",[]);
if(getDecimalVector != null)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getDecimalVector not null!"));
callback("setDecimalVector",[getDecimalVector]);
var getDecimalVectorAsList = callback("getDecimalVectorAsList",[]);
if(getDecimalVectorAsList != null)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getDecimalVectorAsList not null!"));
callback("setDecimalVectorAsList",[getDecimalVectorAsList]);
var getDecimalMatrix = callback("getDecimalMatrix",[]);
if(getDecimalMatrix != null)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getDecimalMatrix not null!"));
callback("setDecimalMatrix",[getDecimalMatrix]);
var getDecimalMatrixAsList = callback("getDecimalMatrixAsList",[]);
if(getDecimalMatrixAsList != null)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getDecimalMatrixAsList not null!"));
callback("setDecimalMatrixAsList",[getDecimalMatrixAsList]);

var getDoubleVector = callback("getDoubleVector",[]);
if(getDoubleVector != null)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getDoubleVector not null!"));
callback("setDoubleVector",[getDoubleVector]);
var getDoubleVectorAsList = callback("getDoubleVectorAsList",[]);
if(getDoubleVectorAsList != null)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getDoubleVectorAsList not null!"));
callback("setDoubleVectorAsList",[getDoubleVectorAsList]);
var getDoubleMatrix = callback("getDoubleMatrix",[]);
if(getDoubleMatrix != null)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getDoubleMatrix not null!"));
callback("setDoubleMatrix",[getDoubleMatrix]);
var getDoubleMatrixAsList = callback("getDoubleMatrixAsList",[]);
if(getDoubleMatrixAsList != null)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getDoubleMatrixAsList not null!"));
callback("setDoubleMatrixAsList",[getDoubleMatrixAsList]);

var getFloatVector = callback("getFloatVector",[]);
if(getFloatVector != null)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getFloatVector not null!"));
callback("setFloatVector",[getFloatVector]);
var getFloatVectorAsList = callback("getFloatVectorAsList",[]);
if(getFloatVectorAsList != null)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getFloatVectorAsList not null!"));
callback("setFloatVectorAsList",[getFloatVectorAsList]);
var getFloatMatrix = callback("getFloatMatrix",[]);
if(getFloatMatrix != null)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getFloatMatrix not null!"));
callback("setFloatMatrix",[getFloatMatrix]);
var getFloatMatrixAsList = callback("getFloatMatrixAsList",[]);
if(getFloatMatrixAsList != null)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getFloatMatrixAsList not null!"));
callback("setFloatMatrixAsList",[getFloatMatrixAsList]);

var getIntegerVector = callback("getIntegerVector",[]);
if(getIntegerVector != null)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getIntegerVector not null!"));
callback("setIntegerVector",[getIntegerVector]);
var getIntegerVectorAsList = callback("getIntegerVectorAsList",[]);
if(getIntegerVectorAsList != null)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getIntegerVectorAsList not null!"));
callback("setIntegerVectorAsList",[getIntegerVectorAsList]);
var getIntegerMatrix = callback("getIntegerMatrix",[]);
if(getIntegerMatrix != null)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getIntegerMatrix not null!"));
callback("setIntegerMatrix",[getIntegerMatrix]);
var getIntegerMatrixAsList = callback("getIntegerMatrixAsList",[]);
if(getIntegerMatrixAsList != null)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getIntegerMatrixAsList not null!"));
callback("setIntegerMatrixAsList",[getIntegerMatrixAsList]);

var getLongVector = callback("getLongVector",[]);
if(getLongVector != null)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getLongVector not null!"));
callback("setLongVector",[getLongVector]);
var getLongVectorAsList = callback("getLongVectorAsList",[]);
if(getLongVectorAsList != null)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getLongVectorAsList not null!"));
callback("setLongVectorAsList",[getLongVectorAsList]);
var getLongMatrix = callback("getLongMatrix",[]);
if(getLongMatrix != null)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getLongMatrix not null!"));
callback("setLongMatrix",[getLongMatrix]);
var getLongMatrixAsList = callback("getLongMatrixAsList",[]);
if(getLongMatrixAsList != null)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getLongMatrixAsList not null!"));
callback("setLongMatrixAsList",[getLongMatrixAsList]);

var getPercentVector = callback("getPercentVector",[]);
if(getPercentVector != null)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getPercentVector not null!"));
callback("setPercentVector",[getPercentVector]);
var getPercentVectorAsList = callback("getPercentVectorAsList",[]);
if(getPercentVectorAsList != null)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getPercentVectorAsList not null!"));
callback("setPercentVectorAsList",[getPercentVectorAsList]);
var getPercentMatrix = callback("getPercentMatrix",[]);
if(getPercentMatrix != null)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getPercentMatrix not null!"));
callback("setPercentMatrix",[getPercentMatrix]);
var getPercentMatrixAsList = callback("getPercentMatrixAsList",[]);
if(getPercentMatrixAsList != null)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getPercentMatrixAsList not null!"));
callback("setPercentMatrixAsList",[getPercentMatrixAsList]);

var getShortVector = callback("getShortVector",[]);
if(getShortVector != null)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getShortVector not null!"));
callback("setShortVector",[getShortVector]);
var getShortVectorAsList = callback("getShortVectorAsList",[]);
if(getShortVectorAsList != null)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getShortVectorAsList not null!"));
callback("setShortVectorAsList",[getShortVectorAsList]);
var getShortMatrix = callback("getShortMatrix",[]);
if(getShortMatrix != null)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getShortMatrix not null!"));
callback("setShortMatrix",[getShortMatrix]);
var getShortMatrixAsList = callback("getShortMatrixAsList",[]);
if(getShortMatrixAsList != null)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getShortMatrixAsList not null!"));
callback("setShortMatrixAsList",[getShortMatrixAsList]);

var getStringVector = callback("getStringVector",[]);
if(getStringVector != null)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getStringVector not null!"));
callback("setStringVector",[getStringVector]);
var getStringVectorAsList = callback("getStringVectorAsList",[]);
if(getStringVectorAsList != null)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getStringVectorAsList not null!"));
callback("setStringVectorAsList",[getStringVectorAsList]);
var getStringMatrix = callback("getStringMatrix",[]);
if(getStringMatrix != null)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getStringMatrix not null!"));
callback("setStringMatrix",[getStringMatrix]);
var getStringMatrixAsList = callback("getStringMatrixAsList",[]);
if(getStringMatrixAsList != null)
	de.invesdwin.util.error.Throwables.propagate(new Exception("getStringMatrixAsList not null!"));
callback("setStringMatrixAsList",[getStringMatrixAsList]);
