//no varargs in a released version yet: https://github.com/beanshell/beanshell/issues/105
Object callback(String methodName) {
    return callback(methodName, de.invesdwin.util.lang.Objects.EMPTY_ARRAY);
}
Object callback(String methodName, Object parameter1) {
    return callback(methodName, new Object[]{parameter1});
}
Object callback(String methodName, Object parameter1, Object parameter2) {
    return callback(methodName, new Object[]{parameter1, parameter2});
}
Object callback(String methodName, Object parameter1, Object parameter2, Object parameter3) {
    return callback(methodName, new Object[]{parameter1, parameter2, parameter3});
}
Object callback(String methodName, Object parameter1, Object parameter2, Object parameter3, Object parameter4) {
    return callback(methodName, new Object[]{parameter1, parameter2, parameter3, parameter4});
}
Object callback(String methodName, Object parameter1, Object parameter2, Object parameter3, Object parameter4, Object parameter5) {
    return callback(methodName, new Object[]{parameter1, parameter2, parameter3, parameter4, parameter5});
}
Object callback(String methodName, Object parameter1, Object parameter2, Object parameter3, Object parameter4, Object parameter5, Object parameter6) {
    return callback(methodName, new Object[]{parameter1, parameter2, parameter3, parameter4, parameter5, parameter6});
}
Object callback(String methodName, Object parameter1, Object parameter2, Object parameter3, Object parameter4, Object parameter5, Object parameter6, Object parameter7) {
    return callback(methodName, new Object[]{parameter1, parameter2, parameter3, parameter4, parameter5, parameter6, parameter7});
}
Object callback(String methodName, Object parameter1, Object parameter2, Object parameter3, Object parameter4, Object parameter5, Object parameter6, Object parameter7, Object parameter8) {
    return callback(methodName, new Object[]{parameter1, parameter2, parameter3, parameter4, parameter5, parameter6, parameter7, parameter8});
}
Object callback(String methodName, Object parameter1, Object parameter2, Object parameter3, Object parameter4, Object parameter5, Object parameter6, Object parameter7, Object parameter8, Object parameter9) {
    return callback(methodName, new Object[]{parameter1, parameter2, parameter3, parameter4, parameter5, parameter6, parameter7, parameter8, parameter9});
}
Object callback(String methodName, Object parameter1, Object parameter2, Object parameter3, Object parameter4, Object parameter5, Object parameter6, Object parameter7, Object parameter8, Object parameter9, Object parameter10) {
    return callback(methodName, new Object[]{parameter1, parameter2, parameter3, parameter4, parameter5, parameter6, parameter7, parameter8, parameter9, parameter10});
}
Object callback(String methodName, Object[] parameters) {
    if(beanshellScriptTaskCallbackContext == void) {
        if(beanshellScriptTaskCallbackContextUuid != void) {
            global.beanshellScriptTaskCallbackContext = de.invesdwin.context.beanshell.callback.BeanshellScriptTaskCallbackContext.getContext(beanshellScriptTaskCallbackContextUuid);
        } else {
            throw new Exception("IScriptTaskCallback not available");
        }
    }
    returnValue = beanshellScriptTaskCallbackContext.invoke(methodName, parameters);
    if(returnValue.isReturnExpression()) {
        return eval(returnValue.getReturnValue());
    } else {
        return returnValue.getReturnValue();
    }
}